<?php

namespace Diside\SecurityBundle\Form\Processor;

use Symfony\Component\Form\FormFactoryInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;
use Symfony\Component\Security\Core\SecurityContext;
use Symfony\Component\Security\Core\SecurityContextInterface;
use SecurityComponent\Interactor\InteractorFactory;
use SecurityComponent\Interactor\Presenter\UserPresenter;
use SecurityComponent\Interactor\Request\ChangePasswordRequest;
use SecurityComponent\Interactor\Request\GetUserByChangePasswordTokenRequest;
use SecurityComponent\Model\User;
use Diside\SecurityBundle\Exception\UnauthorizedException;
use Diside\SecurityBundle\Form\ChangePasswordForm;
use Diside\SecurityBundle\Form\Data\ChangePasswordFormData;

class ChangePasswordFormProcessor extends BaseFormProcessor implements UserPresenter
{

    private $user;

    /** @var EncoderFactoryInterface */
    private $encoderFactory;

    public function __construct(FormFactoryInterface $formFactory, InteractorFactory $interactorFactory, SecurityContextInterface $securityContext, EncoderFactoryInterface $encoderFactory)
    {
        parent::__construct($formFactory, $interactorFactory, $securityContext);

        $this->encoderFactory = $encoderFactory;
    }

    /** @var User */
    public function process(Request $request, $id = null)
    {
        $user = $this->getAuthenticatedUser();

        if ($user->getId() != $id)
            throw new UnauthorizedException;

        parent::process($request, $id); // TODO: Change the autogenerated stub
    }

    public function getUser()
    {
        return $this->user;
    }

    public function setUser(User $user)
    {
        $this->user = $user;
    }

    protected function buildRequest()
    {
        /** @var ChangePasswordFormData $data */
        $data = $this->getFormData();
        $user = $this->getAuthenticatedUser();

        return new ChangePasswordRequest($user->getId(),
            $data->getId(),
            $this->encodePassword($user, $data->getCurrentPassword()),
            $this->encodePassword($user, $data->getNewPassword())
        );
    }

    protected function getSaveInteractorName()
    {
        return InteractorFactory::SAVE_USER;
    }

    protected function buildForm()
    {
        return new ChangePasswordForm();
    }

    protected function buildFormData($id)
    {
        return new ChangePasswordFormData($id);
    }

    private function encodePassword(User $user, $password)
    {
        if($password == null)
            return $password;

        $encoder = $this->encoderFactory->getEncoder($user);

        return $encoder->encodePassword($password, $user->getSalt());
    }
}
